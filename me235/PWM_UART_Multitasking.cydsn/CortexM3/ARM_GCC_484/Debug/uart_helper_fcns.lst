ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"uart_helper_fcns.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	transmit_buffer:
  21 0000 00000000 		.space	128
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.align	2
  23              	receive_buffer:
  24 0080 00000000 		.space	128
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              	num_chars_received:
  26 0100 00       		.space	1
  27 0101 00       		.align	1
  28              	period:
  29 0102 0000     		.space	2
  30              		.section	.text.Interrupt_Handler_UART_Receive,"ax",%progbits
  31              		.align	2
  32              		.global	Interrupt_Handler_UART_Receive
  33              		.thumb
  34              		.thumb_func
  35              		.type	Interrupt_Handler_UART_Receive, %function
  36              	Interrupt_Handler_UART_Receive:
  37              	.LFB56:
  38              		.file 1 ".\\uart_helper_fcns.c"
   1:.\uart_helper_fcns.c **** /* ========================================
   2:.\uart_helper_fcns.c ****  *
   3:.\uart_helper_fcns.c ****  * Copyright Andrew P. Sabelhaus, 2018 
   4:.\uart_helper_fcns.c ****  * See README and LICENSE for more details.
   5:.\uart_helper_fcns.c ****  *
   6:.\uart_helper_fcns.c ****  * ========================================
   7:.\uart_helper_fcns.c **** */
   8:.\uart_helper_fcns.c **** 
   9:.\uart_helper_fcns.c **** // Code adapted heavily from Cypress' example CE95277 ADC and UART,
  10:.\uart_helper_fcns.c **** // but all re-written by Drew.
  11:.\uart_helper_fcns.c **** 
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 2


  12:.\uart_helper_fcns.c **** // We wrote the declarations in the header file,
  13:.\uart_helper_fcns.c **** // and define them here.
  14:.\uart_helper_fcns.c **** // Including this header file in both main.c and here will allow the functions
  15:.\uart_helper_fcns.c **** // to be accessible both places (one to define them, one to use them).
  16:.\uart_helper_fcns.c **** 
  17:.\uart_helper_fcns.c **** // Unlike in the header files, we don't need to add include guards here.
  18:.\uart_helper_fcns.c **** // That's because the guards are already present in the .h files themselves.
  19:.\uart_helper_fcns.c **** #include "uart_helper_fcns.h"
  20:.\uart_helper_fcns.c **** #include <project.h>
  21:.\uart_helper_fcns.c **** // stdio.h provides the sprintf and sscanf functions for working with strings.
  22:.\uart_helper_fcns.c **** #include "stdio.h"
  23:.\uart_helper_fcns.c **** 
  24:.\uart_helper_fcns.c **** // We're going to define the size of the character array for the transmission
  25:.\uart_helper_fcns.c **** // back to the PC. This is in bytes: if a uint8 is one character, we can store
  26:.\uart_helper_fcns.c **** // a string of this length. E.g. 16 gives us 16 characters, including any integers represented as c
  27:.\uart_helper_fcns.c **** // This solves exactly the same problem as in the supplement to tutorial 6!!!
  28:.\uart_helper_fcns.c **** // Drew used 128 here, like with receive, because it's 
  29:.\uart_helper_fcns.c **** // "big enough." Compare to the size of the period of the PWM, as returned from ReadPeriod(), 
  30:.\uart_helper_fcns.c **** // and the string of text I put down below.
  31:.\uart_helper_fcns.c **** // How many bytes (characters) will we expect to need to send back? How many are "taken up" by the 
  32:.\uart_helper_fcns.c **** #define TRANSMIT_LENGTH 128
  33:.\uart_helper_fcns.c **** // We're also going to keep a buffer of received characters, since multiple bytes are needed.
  34:.\uart_helper_fcns.c **** // The size of this here is the number of characters you can type into TeraTerm before pressing ent
  35:.\uart_helper_fcns.c **** // George suggested 128, which is way many more than you'll need. 
  36:.\uart_helper_fcns.c **** // Note the example of "make the array larger than you need just in case because it doesn't really 
  37:.\uart_helper_fcns.c **** #define RECEIVE_LENGTH 128
  38:.\uart_helper_fcns.c **** 
  39:.\uart_helper_fcns.c **** // See tutorial 7 supplement for discussion on "static".
  40:.\uart_helper_fcns.c **** 
  41:.\uart_helper_fcns.c **** // Also, keep the buffer as a global variable instead of creating it inside the ISR.
  42:.\uart_helper_fcns.c **** // This is for efficiency, and since we'll need to send back a string of characters with numbers al
  43:.\uart_helper_fcns.c **** static char transmit_buffer[TRANSMIT_LENGTH];
  44:.\uart_helper_fcns.c **** // similarly, we want a receive buffer, for taking in multiple charactes as they are sent to the PS
  45:.\uart_helper_fcns.c **** static char receive_buffer[RECEIVE_LENGTH];
  46:.\uart_helper_fcns.c **** 
  47:.\uart_helper_fcns.c **** // Since the UART only sends single bytes, we encounter a problem with setting numerical values.
  48:.\uart_helper_fcns.c **** // Specifically, the byte send is interpreted as a character, NOT a number.
  49:.\uart_helper_fcns.c **** // See the ASCII table for a bit more intuition: for example, to set a period between 100 and 200, 
  50:.\uart_helper_fcns.c **** // type in the characters between 'd' and 'weird L bar thing that isn't on Drew's keyboard. 
  51:.\uart_helper_fcns.c **** // https://www.asciitable.com/
  52:.\uart_helper_fcns.c **** // That's not OK. Instead, let's take in each character, store it in a buffer.
  53:.\uart_helper_fcns.c **** // The num_chars_received integer allows us to index into the string buffer (since it's an array of
  54:.\uart_helper_fcns.c **** static uint8 num_chars_received = 0;
  55:.\uart_helper_fcns.c **** 
  56:.\uart_helper_fcns.c **** // In the example that Drew got from George, we used a character to split
  57:.\uart_helper_fcns.c **** 
  58:.\uart_helper_fcns.c **** // the period, as recorded in the helpers below. By declaring with global scope, we
  59:.\uart_helper_fcns.c **** // increase efficiency.
  60:.\uart_helper_fcns.c **** static uint16 period = 0;
  61:.\uart_helper_fcns.c **** 
  62:.\uart_helper_fcns.c **** // Definition of the UART ISR
  63:.\uart_helper_fcns.c **** // We use the same line for the function definition, with the CY_ISR macro.
  64:.\uart_helper_fcns.c **** // Compare this to tutorial 6, with "pythagorean"
  65:.\uart_helper_fcns.c **** CY_ISR( Interrupt_Handler_UART_Receive){
  39              		.loc 1 65 0
  40              		.cfi_startproc
  41              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 3


  42              		@ frame_needed = 1, uses_anonymous_args = 0
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 82B0     		sub	sp, sp, #8
  48              		.cfi_def_cfa_offset 16
  49 0004 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
  66:.\uart_helper_fcns.c ****     // We assume this ISR is called when a byte is received.
  67:.\uart_helper_fcns.c ****     // See how the IDE doesn't give any errors, as long as we include project.h here.
  68:.\uart_helper_fcns.c ****     uint8 received_byte = UART_for_USB_GetChar();
  51              		.loc 1 68 0
  52 0006 FFF7FEFF 		bl	UART_for_USB_GetChar
  53 000a 0346     		mov	r3, r0
  54 000c FB71     		strb	r3, [r7, #7]
  69:.\uart_helper_fcns.c ****     
  70:.\uart_helper_fcns.c ****     // Next, we need to deal with what was received, in the following way.
  71:.\uart_helper_fcns.c ****     // If a new line is received (the \n character, or ASCII values 10 or 12 or 13 depending on if 
  72:.\uart_helper_fcns.c ****     // then finally set the period.
  73:.\uart_helper_fcns.c ****     // Otherwise, add to the uint16 we're keeping track of.
  74:.\uart_helper_fcns.c ****     // Luckily enough, C allows us to "switch" on uint8s, since characters are also numbers via the
  75:.\uart_helper_fcns.c ****     switch( received_byte )
  55              		.loc 1 75 0
  56 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  57 0010 0A2B     		cmp	r3, #10
  58 0012 01D0     		beq	.L3
  59 0014 0D2B     		cmp	r3, #13
  60 0016 07D1     		bne	.L5
  61              	.L3:
  76:.\uart_helper_fcns.c ****     {
  77:.\uart_helper_fcns.c ****         // Students: look up switch-case statements. to understand this more.
  78:.\uart_helper_fcns.c ****         // We're going to take advantage of the "flow" of switch-case to do the same thing for char
  79:.\uart_helper_fcns.c ****         // which could all be newlines, by not "break"-ing until the end of the third case.
  80:.\uart_helper_fcns.c ****         case '\r':
  81:.\uart_helper_fcns.c ****             // flow downward, no specific code for carriage return
  82:.\uart_helper_fcns.c ****         case '\n':
  83:.\uart_helper_fcns.c ****             // This code will run if the received byte is either a carriage return or a newline.
  84:.\uart_helper_fcns.c ****             // Since the PSoC received a new line...
  85:.\uart_helper_fcns.c ****             // First, terminate the string. This is for the use of sscanf below.
  86:.\uart_helper_fcns.c ****             receive_buffer[num_chars_received] = '\0';
  62              		.loc 1 86 0
  63 0018 0B4B     		ldr	r3, .L6
  64 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  65 001c 0B4A     		ldr	r2, .L6+4
  66 001e 0021     		movs	r1, #0
  67 0020 D154     		strb	r1, [r2, r3]
  87:.\uart_helper_fcns.c ****             Write_PWM_and_UART();
  68              		.loc 1 87 0
  69 0022 FFF7FEFF 		bl	Write_PWM_and_UART
  88:.\uart_helper_fcns.c ****             // This helper will also reset the period we're tracking, and the num chars received.
  89:.\uart_helper_fcns.c ****             // By "break"-ing, the next case is not executed.
  90:.\uart_helper_fcns.c ****             break;
  70              		.loc 1 90 0
  71 0026 0BE0     		b	.L1
  72              	.L5:
  91:.\uart_helper_fcns.c ****         default:
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 4


  92:.\uart_helper_fcns.c ****             // The "default" case is "anything else", which is "store another character."
  93:.\uart_helper_fcns.c ****             // Add to the received buffer.
  94:.\uart_helper_fcns.c ****             receive_buffer[num_chars_received] = received_byte;
  73              		.loc 1 94 0
  74 0028 074B     		ldr	r3, .L6
  75 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  76 002c 074A     		ldr	r2, .L6+4
  77 002e F979     		ldrb	r1, [r7, #7]
  78 0030 D154     		strb	r1, [r2, r3]
  95:.\uart_helper_fcns.c ****             // We need to increment the counter. i++ does this without an equals sign for assignmen
  96:.\uart_helper_fcns.c ****             num_chars_received++;
  79              		.loc 1 96 0
  80 0032 054B     		ldr	r3, .L6
  81 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  82 0036 0133     		adds	r3, r3, #1
  83 0038 DAB2     		uxtb	r2, r3
  84 003a 034B     		ldr	r3, .L6
  85 003c 1A70     		strb	r2, [r3]
  97:.\uart_helper_fcns.c ****             break;
  86              		.loc 1 97 0
  87 003e 00BF     		nop
  88              	.L1:
  98:.\uart_helper_fcns.c ****         // end of case statement.
  99:.\uart_helper_fcns.c ****     }
 100:.\uart_helper_fcns.c ****     
 101:.\uart_helper_fcns.c ****     // We're going to assume that the character we receive is an integer, 
 102:.\uart_helper_fcns.c ****     // representing the period.
 103:.\uart_helper_fcns.c ****     // For a transmission of 8 bits, we can only set the period between 0 and 255.
 104:.\uart_helper_fcns.c ****     // This is OK for how we've configured the PWM for our servo: 
 105:.\uart_helper_fcns.c ****     // our period can only be between 100 and 200 anyway (1 ms for min angle, 2 ms for max angle).
 106:.\uart_helper_fcns.c ****     // To get better resolution here, you'll need to do a handful of things:
 107:.\uart_helper_fcns.c ****     // (1) change the clock of the PWM so that we'll need a uint16 to represent 1 ms to 2 ms of "on
 108:.\uart_helper_fcns.c ****     // (2) receive two bytes (as uint8) from the UART, keep track of the first one
 109:.\uart_helper_fcns.c ****     // (3) once two are received, combine them into a uint16
 110:.\uart_helper_fcns.c ****     // (4) write the uint16 to the PWM's period, as with the code below.    
 111:.\uart_helper_fcns.c ****     
 112:.\uart_helper_fcns.c ****     
 113:.\uart_helper_fcns.c ****     
 114:.\uart_helper_fcns.c **** }
  89              		.loc 1 114 0
  90 0040 0837     		adds	r7, r7, #8
  91 0042 BD46     		mov	sp, r7
  92              		@ sp needed
  93 0044 80BD     		pop	{r7, pc}
  94              	.L7:
  95 0046 00BF     		.align	2
  96              	.L6:
  97 0048 00010000 		.word	num_chars_received
  98 004c 80000000 		.word	receive_buffer
  99              		.cfi_endproc
 100              	.LFE56:
 101              		.size	Interrupt_Handler_UART_Receive, .-Interrupt_Handler_UART_Receive
 102              		.section	.rodata
 103              		.align	2
 104              	.LC0:
 105 0000 703A2564 		.ascii	"p:%d\000"
 105      00
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 5


 106 0005 000000   		.align	2
 107              	.LC1:
 108 0008 50574D20 		.ascii	"PWM now has a period of: %i \015\012\000"
 108      6E6F7720 
 108      68617320 
 108      61207065 
 108      72696F64 
 109 0027 00       		.align	2
 110              	.LC2:
 111 0028 53657420 		.ascii	"Set the period by typing p: then a new period, betw"
 111      74686520 
 111      70657269 
 111      6F642062 
 111      79207479 
 112 005b 65656E20 		.ascii	"een 100 and 200 (min and max period for a servo on "
 112      31303020 
 112      616E6420 
 112      32303020 
 112      286D696E 
 113 008e 61203130 		.ascii	"a 100 kHz clock).\015\012\000"
 113      30206B48 
 113      7A20636C 
 113      6F636B29 
 113      2E0D0A00 
 114 00a2 0000     		.section	.text.Write_PWM_and_UART,"ax",%progbits
 115              		.align	2
 116              		.global	Write_PWM_and_UART
 117              		.thumb
 118              		.thumb_func
 119              		.type	Write_PWM_and_UART, %function
 120              	Write_PWM_and_UART:
 121              	.LFB57:
 115:.\uart_helper_fcns.c **** 
 116:.\uart_helper_fcns.c **** // Helper function that does the writing to the PWM and UART.
 117:.\uart_helper_fcns.c **** // makes the ISR code easier to understand.
 118:.\uart_helper_fcns.c **** void Write_PWM_and_UART(){
 122              		.loc 1 118 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 7, -8
 129              		.cfi_offset 14, -4
 130 0002 82B0     		sub	sp, sp, #8
 131              		.cfi_def_cfa_offset 16
 132 0004 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
 119:.\uart_helper_fcns.c ****     // OK, so now, we have a string in the receive buffer of the form "p:somenumber".
 120:.\uart_helper_fcns.c ****     // Read in the integer after the p:
 121:.\uart_helper_fcns.c ****     sscanf( receive_buffer, "p:%d", &period);
 134              		.loc 1 121 0
 135 0006 0E48     		ldr	r0, .L9
 136 0008 0E49     		ldr	r1, .L9+4
 137 000a 0F4A     		ldr	r2, .L9+8
 138 000c FFF7FEFF 		bl	sscanf
 122:.\uart_helper_fcns.c ****     // TO-DO: checking on output of sscanf to confirm the user wrote a p:
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 6


 123:.\uart_helper_fcns.c ****     // sscanf requires the address-of (&) for the variable to be written.
 124:.\uart_helper_fcns.c ****     // Now, set the period, 
 125:.\uart_helper_fcns.c ****     PWM_Servo_WritePeriod( period );
 139              		.loc 1 125 0
 140 0010 0D4B     		ldr	r3, .L9+8
 141 0012 1B88     		ldrh	r3, [r3]
 142 0014 1846     		mov	r0, r3
 143 0016 FFF7FEFF 		bl	PWM_Servo_WritePeriod
 126:.\uart_helper_fcns.c ****     
 127:.\uart_helper_fcns.c ****     // and send back the period that was just written, for confirmation.
 128:.\uart_helper_fcns.c ****     // In C, to concatenate a number (integer) and a string (characters), you need to...
 129:.\uart_helper_fcns.c ****     // (1) store the result, as confirmed by the PWM component.
 130:.\uart_helper_fcns.c ****     uint16 period_written = PWM_Servo_ReadPeriod();
 144              		.loc 1 130 0
 145 001a FFF7FEFF 		bl	PWM_Servo_ReadPeriod
 146 001e 0346     		mov	r3, r0
 147 0020 FB80     		strh	r3, [r7, #6]	@ movhi
 131:.\uart_helper_fcns.c ****     // (2) Concatenate this period with a string of characters describing what we did
 132:.\uart_helper_fcns.c ****     // Requires stdio.h (standard input/output) for the sprintf function.
 133:.\uart_helper_fcns.c ****     sprintf( transmit_buffer, "PWM now has a period of: %i \r\n", period_written);
 148              		.loc 1 133 0
 149 0022 FB88     		ldrh	r3, [r7, #6]
 150 0024 0948     		ldr	r0, .L9+12
 151 0026 0A49     		ldr	r1, .L9+16
 152 0028 1A46     		mov	r2, r3
 153 002a FFF7FEFF 		bl	sprintf
 134:.\uart_helper_fcns.c ****     // (3) send the byte back to your PC
 135:.\uart_helper_fcns.c ****     UART_for_USB_PutString( transmit_buffer );    
 154              		.loc 1 135 0
 155 002e 0748     		ldr	r0, .L9+12
 156 0030 FFF7FEFF 		bl	UART_for_USB_PutString
 136:.\uart_helper_fcns.c ****     // (4) Send another little string prompting the next input.
 137:.\uart_helper_fcns.c ****     UART_for_USB_PutString( "Set the period by typing p: then a new period, between 100 and 200 (mi
 157              		.loc 1 137 0
 158 0034 0748     		ldr	r0, .L9+20
 159 0036 FFF7FEFF 		bl	UART_for_USB_PutString
 138:.\uart_helper_fcns.c ****     // Note that we don't have to reset the buffer here, since sscanf only reads up until the first
 139:.\uart_helper_fcns.c **** }
 160              		.loc 1 139 0
 161 003a 0837     		adds	r7, r7, #8
 162 003c BD46     		mov	sp, r7
 163              		@ sp needed
 164 003e 80BD     		pop	{r7, pc}
 165              	.L10:
 166              		.align	2
 167              	.L9:
 168 0040 80000000 		.word	receive_buffer
 169 0044 00000000 		.word	.LC0
 170 0048 02010000 		.word	period
 171 004c 00000000 		.word	transmit_buffer
 172 0050 08000000 		.word	.LC1
 173 0054 28000000 		.word	.LC2
 174              		.cfi_endproc
 175              	.LFE57:
 176              		.size	Write_PWM_and_UART, .-Write_PWM_and_UART
 177              		.text
 178              	.Letext0:
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 7


 179              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 180              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 181              		.file 4 ".\\Generated_Source\\PSoC5/cytypes.h"
 182              		.file 5 ".\\Generated_Source\\PSoC5/core_cm3.h"
 183              		.section	.debug_info,"",%progbits
 184              	.Ldebug_info0:
 185 0000 5D010000 		.4byte	0x15d
 186 0004 0400     		.2byte	0x4
 187 0006 00000000 		.4byte	.Ldebug_abbrev0
 188 000a 04       		.byte	0x4
 189 000b 01       		.uleb128 0x1
 190 000c 35010000 		.4byte	.LASF23
 191 0010 01       		.byte	0x1
 192 0011 10020000 		.4byte	.LASF24
 193 0015 6C000000 		.4byte	.LASF25
 194 0019 00000000 		.4byte	.Ldebug_ranges0+0
 195 001d 00000000 		.4byte	0
 196 0021 00000000 		.4byte	.Ldebug_line0
 197 0025 02       		.uleb128 0x2
 198 0026 01       		.byte	0x1
 199 0027 06       		.byte	0x6
 200 0028 29010000 		.4byte	.LASF0
 201 002c 02       		.uleb128 0x2
 202 002d 01       		.byte	0x1
 203 002e 08       		.byte	0x8
 204 002f BD000000 		.4byte	.LASF1
 205 0033 02       		.uleb128 0x2
 206 0034 02       		.byte	0x2
 207 0035 05       		.byte	0x5
 208 0036 C1010000 		.4byte	.LASF2
 209 003a 02       		.uleb128 0x2
 210 003b 02       		.byte	0x2
 211 003c 07       		.byte	0x7
 212 003d 0E000000 		.4byte	.LASF3
 213 0041 03       		.uleb128 0x3
 214 0042 B1010000 		.4byte	.LASF9
 215 0046 02       		.byte	0x2
 216 0047 37       		.byte	0x37
 217 0048 4C000000 		.4byte	0x4c
 218 004c 02       		.uleb128 0x2
 219 004d 04       		.byte	0x4
 220 004e 05       		.byte	0x5
 221 004f E3000000 		.4byte	.LASF4
 222 0053 02       		.uleb128 0x2
 223 0054 04       		.byte	0x4
 224 0055 07       		.byte	0x7
 225 0056 43000000 		.4byte	.LASF5
 226 005a 02       		.uleb128 0x2
 227 005b 08       		.byte	0x8
 228 005c 05       		.byte	0x5
 229 005d 00000000 		.4byte	.LASF6
 230 0061 02       		.uleb128 0x2
 231 0062 08       		.byte	0x8
 232 0063 07       		.byte	0x7
 233 0064 55000000 		.4byte	.LASF7
 234 0068 04       		.uleb128 0x4
 235 0069 04       		.byte	0x4
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 8


 236 006a 05       		.byte	0x5
 237 006b 696E7400 		.ascii	"int\000"
 238 006f 02       		.uleb128 0x2
 239 0070 04       		.byte	0x4
 240 0071 07       		.byte	0x7
 241 0072 21000000 		.4byte	.LASF8
 242 0076 03       		.uleb128 0x3
 243 0077 EC000000 		.4byte	.LASF10
 244 007b 03       		.byte	0x3
 245 007c 41       		.byte	0x41
 246 007d 41000000 		.4byte	0x41
 247 0081 03       		.uleb128 0x3
 248 0082 2E000000 		.4byte	.LASF11
 249 0086 04       		.byte	0x4
 250 0087 A1       		.byte	0xa1
 251 0088 2C000000 		.4byte	0x2c
 252 008c 03       		.uleb128 0x3
 253 008d CB010000 		.4byte	.LASF12
 254 0091 04       		.byte	0x4
 255 0092 A2       		.byte	0xa2
 256 0093 3A000000 		.4byte	0x3a
 257 0097 02       		.uleb128 0x2
 258 0098 04       		.byte	0x4
 259 0099 04       		.byte	0x4
 260 009a BB010000 		.4byte	.LASF13
 261 009e 02       		.uleb128 0x2
 262 009f 08       		.byte	0x8
 263 00a0 04       		.byte	0x4
 264 00a1 07010000 		.4byte	.LASF14
 265 00a5 02       		.uleb128 0x2
 266 00a6 01       		.byte	0x1
 267 00a7 08       		.byte	0x8
 268 00a8 CB000000 		.4byte	.LASF15
 269 00ac 02       		.uleb128 0x2
 270 00ad 04       		.byte	0x4
 271 00ae 07       		.byte	0x7
 272 00af 07020000 		.4byte	.LASF16
 273 00b3 05       		.uleb128 0x5
 274 00b4 D2010000 		.4byte	.LASF26
 275 00b8 01       		.byte	0x1
 276 00b9 41       		.byte	0x41
 277 00ba 00000000 		.4byte	.LFB56
 278 00be 50000000 		.4byte	.LFE56-.LFB56
 279 00c2 01       		.uleb128 0x1
 280 00c3 9C       		.byte	0x9c
 281 00c4 D7000000 		.4byte	0xd7
 282 00c8 06       		.uleb128 0x6
 283 00c9 0E010000 		.4byte	.LASF17
 284 00cd 01       		.byte	0x1
 285 00ce 44       		.byte	0x44
 286 00cf 81000000 		.4byte	0x81
 287 00d3 02       		.uleb128 0x2
 288 00d4 91       		.byte	0x91
 289 00d5 77       		.sleb128 -9
 290 00d6 00       		.byte	0
 291 00d7 07       		.uleb128 0x7
 292 00d8 F4000000 		.4byte	.LASF27
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 9


 293 00dc 01       		.byte	0x1
 294 00dd 76       		.byte	0x76
 295 00de 00000000 		.4byte	.LFB57
 296 00e2 58000000 		.4byte	.LFE57-.LFB57
 297 00e6 01       		.uleb128 0x1
 298 00e7 9C       		.byte	0x9c
 299 00e8 FB000000 		.4byte	0xfb
 300 00ec 06       		.uleb128 0x6
 301 00ed F8010000 		.4byte	.LASF18
 302 00f1 01       		.byte	0x1
 303 00f2 82       		.byte	0x82
 304 00f3 8C000000 		.4byte	0x8c
 305 00f7 02       		.uleb128 0x2
 306 00f8 91       		.byte	0x91
 307 00f9 76       		.sleb128 -10
 308 00fa 00       		.byte	0
 309 00fb 08       		.uleb128 0x8
 310 00fc A5000000 		.4byte	0xa5
 311 0100 0B010000 		.4byte	0x10b
 312 0104 09       		.uleb128 0x9
 313 0105 AC000000 		.4byte	0xac
 314 0109 7F       		.byte	0x7f
 315 010a 00       		.byte	0
 316 010b 06       		.uleb128 0x6
 317 010c AD000000 		.4byte	.LASF19
 318 0110 01       		.byte	0x1
 319 0111 2B       		.byte	0x2b
 320 0112 FB000000 		.4byte	0xfb
 321 0116 05       		.uleb128 0x5
 322 0117 03       		.byte	0x3
 323 0118 00000000 		.4byte	transmit_buffer
 324 011c 06       		.uleb128 0x6
 325 011d 34000000 		.4byte	.LASF20
 326 0121 01       		.byte	0x1
 327 0122 2D       		.byte	0x2d
 328 0123 FB000000 		.4byte	0xfb
 329 0127 05       		.uleb128 0x5
 330 0128 03       		.byte	0x3
 331 0129 80000000 		.4byte	receive_buffer
 332 012d 06       		.uleb128 0x6
 333 012e D0000000 		.4byte	.LASF21
 334 0132 01       		.byte	0x1
 335 0133 36       		.byte	0x36
 336 0134 81000000 		.4byte	0x81
 337 0138 05       		.uleb128 0x5
 338 0139 03       		.byte	0x3
 339 013a 00010000 		.4byte	num_chars_received
 340 013e 06       		.uleb128 0x6
 341 013f F1010000 		.4byte	.LASF22
 342 0143 01       		.byte	0x1
 343 0144 3C       		.byte	0x3c
 344 0145 8C000000 		.4byte	0x8c
 345 0149 05       		.uleb128 0x5
 346 014a 03       		.byte	0x3
 347 014b 02010000 		.4byte	period
 348 014f 0A       		.uleb128 0xa
 349 0150 1C010000 		.4byte	.LASF28
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 10


 350 0154 05       		.byte	0x5
 351 0155 1606     		.2byte	0x616
 352 0157 5B010000 		.4byte	0x15b
 353 015b 0B       		.uleb128 0xb
 354 015c 76000000 		.4byte	0x76
 355 0160 00       		.byte	0
 356              		.section	.debug_abbrev,"",%progbits
 357              	.Ldebug_abbrev0:
 358 0000 01       		.uleb128 0x1
 359 0001 11       		.uleb128 0x11
 360 0002 01       		.byte	0x1
 361 0003 25       		.uleb128 0x25
 362 0004 0E       		.uleb128 0xe
 363 0005 13       		.uleb128 0x13
 364 0006 0B       		.uleb128 0xb
 365 0007 03       		.uleb128 0x3
 366 0008 0E       		.uleb128 0xe
 367 0009 1B       		.uleb128 0x1b
 368 000a 0E       		.uleb128 0xe
 369 000b 55       		.uleb128 0x55
 370 000c 17       		.uleb128 0x17
 371 000d 11       		.uleb128 0x11
 372 000e 01       		.uleb128 0x1
 373 000f 10       		.uleb128 0x10
 374 0010 17       		.uleb128 0x17
 375 0011 00       		.byte	0
 376 0012 00       		.byte	0
 377 0013 02       		.uleb128 0x2
 378 0014 24       		.uleb128 0x24
 379 0015 00       		.byte	0
 380 0016 0B       		.uleb128 0xb
 381 0017 0B       		.uleb128 0xb
 382 0018 3E       		.uleb128 0x3e
 383 0019 0B       		.uleb128 0xb
 384 001a 03       		.uleb128 0x3
 385 001b 0E       		.uleb128 0xe
 386 001c 00       		.byte	0
 387 001d 00       		.byte	0
 388 001e 03       		.uleb128 0x3
 389 001f 16       		.uleb128 0x16
 390 0020 00       		.byte	0
 391 0021 03       		.uleb128 0x3
 392 0022 0E       		.uleb128 0xe
 393 0023 3A       		.uleb128 0x3a
 394 0024 0B       		.uleb128 0xb
 395 0025 3B       		.uleb128 0x3b
 396 0026 0B       		.uleb128 0xb
 397 0027 49       		.uleb128 0x49
 398 0028 13       		.uleb128 0x13
 399 0029 00       		.byte	0
 400 002a 00       		.byte	0
 401 002b 04       		.uleb128 0x4
 402 002c 24       		.uleb128 0x24
 403 002d 00       		.byte	0
 404 002e 0B       		.uleb128 0xb
 405 002f 0B       		.uleb128 0xb
 406 0030 3E       		.uleb128 0x3e
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 11


 407 0031 0B       		.uleb128 0xb
 408 0032 03       		.uleb128 0x3
 409 0033 08       		.uleb128 0x8
 410 0034 00       		.byte	0
 411 0035 00       		.byte	0
 412 0036 05       		.uleb128 0x5
 413 0037 2E       		.uleb128 0x2e
 414 0038 01       		.byte	0x1
 415 0039 3F       		.uleb128 0x3f
 416 003a 19       		.uleb128 0x19
 417 003b 03       		.uleb128 0x3
 418 003c 0E       		.uleb128 0xe
 419 003d 3A       		.uleb128 0x3a
 420 003e 0B       		.uleb128 0xb
 421 003f 3B       		.uleb128 0x3b
 422 0040 0B       		.uleb128 0xb
 423 0041 27       		.uleb128 0x27
 424 0042 19       		.uleb128 0x19
 425 0043 11       		.uleb128 0x11
 426 0044 01       		.uleb128 0x1
 427 0045 12       		.uleb128 0x12
 428 0046 06       		.uleb128 0x6
 429 0047 40       		.uleb128 0x40
 430 0048 18       		.uleb128 0x18
 431 0049 9642     		.uleb128 0x2116
 432 004b 19       		.uleb128 0x19
 433 004c 01       		.uleb128 0x1
 434 004d 13       		.uleb128 0x13
 435 004e 00       		.byte	0
 436 004f 00       		.byte	0
 437 0050 06       		.uleb128 0x6
 438 0051 34       		.uleb128 0x34
 439 0052 00       		.byte	0
 440 0053 03       		.uleb128 0x3
 441 0054 0E       		.uleb128 0xe
 442 0055 3A       		.uleb128 0x3a
 443 0056 0B       		.uleb128 0xb
 444 0057 3B       		.uleb128 0x3b
 445 0058 0B       		.uleb128 0xb
 446 0059 49       		.uleb128 0x49
 447 005a 13       		.uleb128 0x13
 448 005b 02       		.uleb128 0x2
 449 005c 18       		.uleb128 0x18
 450 005d 00       		.byte	0
 451 005e 00       		.byte	0
 452 005f 07       		.uleb128 0x7
 453 0060 2E       		.uleb128 0x2e
 454 0061 01       		.byte	0x1
 455 0062 3F       		.uleb128 0x3f
 456 0063 19       		.uleb128 0x19
 457 0064 03       		.uleb128 0x3
 458 0065 0E       		.uleb128 0xe
 459 0066 3A       		.uleb128 0x3a
 460 0067 0B       		.uleb128 0xb
 461 0068 3B       		.uleb128 0x3b
 462 0069 0B       		.uleb128 0xb
 463 006a 11       		.uleb128 0x11
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 12


 464 006b 01       		.uleb128 0x1
 465 006c 12       		.uleb128 0x12
 466 006d 06       		.uleb128 0x6
 467 006e 40       		.uleb128 0x40
 468 006f 18       		.uleb128 0x18
 469 0070 9642     		.uleb128 0x2116
 470 0072 19       		.uleb128 0x19
 471 0073 01       		.uleb128 0x1
 472 0074 13       		.uleb128 0x13
 473 0075 00       		.byte	0
 474 0076 00       		.byte	0
 475 0077 08       		.uleb128 0x8
 476 0078 01       		.uleb128 0x1
 477 0079 01       		.byte	0x1
 478 007a 49       		.uleb128 0x49
 479 007b 13       		.uleb128 0x13
 480 007c 01       		.uleb128 0x1
 481 007d 13       		.uleb128 0x13
 482 007e 00       		.byte	0
 483 007f 00       		.byte	0
 484 0080 09       		.uleb128 0x9
 485 0081 21       		.uleb128 0x21
 486 0082 00       		.byte	0
 487 0083 49       		.uleb128 0x49
 488 0084 13       		.uleb128 0x13
 489 0085 2F       		.uleb128 0x2f
 490 0086 0B       		.uleb128 0xb
 491 0087 00       		.byte	0
 492 0088 00       		.byte	0
 493 0089 0A       		.uleb128 0xa
 494 008a 34       		.uleb128 0x34
 495 008b 00       		.byte	0
 496 008c 03       		.uleb128 0x3
 497 008d 0E       		.uleb128 0xe
 498 008e 3A       		.uleb128 0x3a
 499 008f 0B       		.uleb128 0xb
 500 0090 3B       		.uleb128 0x3b
 501 0091 05       		.uleb128 0x5
 502 0092 49       		.uleb128 0x49
 503 0093 13       		.uleb128 0x13
 504 0094 3F       		.uleb128 0x3f
 505 0095 19       		.uleb128 0x19
 506 0096 3C       		.uleb128 0x3c
 507 0097 19       		.uleb128 0x19
 508 0098 00       		.byte	0
 509 0099 00       		.byte	0
 510 009a 0B       		.uleb128 0xb
 511 009b 35       		.uleb128 0x35
 512 009c 00       		.byte	0
 513 009d 49       		.uleb128 0x49
 514 009e 13       		.uleb128 0x13
 515 009f 00       		.byte	0
 516 00a0 00       		.byte	0
 517 00a1 00       		.byte	0
 518              		.section	.debug_aranges,"",%progbits
 519 0000 24000000 		.4byte	0x24
 520 0004 0200     		.2byte	0x2
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 13


 521 0006 00000000 		.4byte	.Ldebug_info0
 522 000a 04       		.byte	0x4
 523 000b 00       		.byte	0
 524 000c 0000     		.2byte	0
 525 000e 0000     		.2byte	0
 526 0010 00000000 		.4byte	.LFB56
 527 0014 50000000 		.4byte	.LFE56-.LFB56
 528 0018 00000000 		.4byte	.LFB57
 529 001c 58000000 		.4byte	.LFE57-.LFB57
 530 0020 00000000 		.4byte	0
 531 0024 00000000 		.4byte	0
 532              		.section	.debug_ranges,"",%progbits
 533              	.Ldebug_ranges0:
 534 0000 00000000 		.4byte	.LFB56
 535 0004 50000000 		.4byte	.LFE56
 536 0008 00000000 		.4byte	.LFB57
 537 000c 58000000 		.4byte	.LFE57
 538 0010 00000000 		.4byte	0
 539 0014 00000000 		.4byte	0
 540              		.section	.debug_line,"",%progbits
 541              	.Ldebug_line0:
 542 0000 97010000 		.section	.debug_str,"MS",%progbits,1
 542      02005D01 
 542      00000201 
 542      FB0E0D00 
 542      01010101 
 543              	.LASF6:
 544 0000 6C6F6E67 		.ascii	"long long int\000"
 544      206C6F6E 
 544      6720696E 
 544      7400
 545              	.LASF3:
 546 000e 73686F72 		.ascii	"short unsigned int\000"
 546      7420756E 
 546      7369676E 
 546      65642069 
 546      6E7400
 547              	.LASF8:
 548 0021 756E7369 		.ascii	"unsigned int\000"
 548      676E6564 
 548      20696E74 
 548      00
 549              	.LASF11:
 550 002e 75696E74 		.ascii	"uint8\000"
 550      3800
 551              	.LASF20:
 552 0034 72656365 		.ascii	"receive_buffer\000"
 552      6976655F 
 552      62756666 
 552      657200
 553              	.LASF5:
 554 0043 6C6F6E67 		.ascii	"long unsigned int\000"
 554      20756E73 
 554      69676E65 
 554      6420696E 
 554      7400
 555              	.LASF7:
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 14


 556 0055 6C6F6E67 		.ascii	"long long unsigned int\000"
 556      206C6F6E 
 556      6720756E 
 556      7369676E 
 556      65642069 
 557              	.LASF25:
 558 006c 443A5C57 		.ascii	"D:\\WindowsGitHub\\psoc-examples\\me235\\PWM_UART_M"
 558      696E646F 
 558      77734769 
 558      74487562 
 558      5C70736F 
 559 009b 756C7469 		.ascii	"ultitasking.cydsn\000"
 559      7461736B 
 559      696E672E 
 559      63796473 
 559      6E00
 560              	.LASF19:
 561 00ad 7472616E 		.ascii	"transmit_buffer\000"
 561      736D6974 
 561      5F627566 
 561      66657200 
 562              	.LASF1:
 563 00bd 756E7369 		.ascii	"unsigned char\000"
 563      676E6564 
 563      20636861 
 563      7200
 564              	.LASF15:
 565 00cb 63686172 		.ascii	"char\000"
 565      00
 566              	.LASF21:
 567 00d0 6E756D5F 		.ascii	"num_chars_received\000"
 567      63686172 
 567      735F7265 
 567      63656976 
 567      656400
 568              	.LASF4:
 569 00e3 6C6F6E67 		.ascii	"long int\000"
 569      20696E74 
 569      00
 570              	.LASF10:
 571 00ec 696E7433 		.ascii	"int32_t\000"
 571      325F7400 
 572              	.LASF27:
 573 00f4 57726974 		.ascii	"Write_PWM_and_UART\000"
 573      655F5057 
 573      4D5F616E 
 573      645F5541 
 573      525400
 574              	.LASF14:
 575 0107 646F7562 		.ascii	"double\000"
 575      6C6500
 576              	.LASF17:
 577 010e 72656365 		.ascii	"received_byte\000"
 577      69766564 
 577      5F627974 
 577      6500
 578              	.LASF28:
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 15


 579 011c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 579      52784275 
 579      66666572 
 579      00
 580              	.LASF0:
 581 0129 7369676E 		.ascii	"signed char\000"
 581      65642063 
 581      68617200 
 582              	.LASF23:
 583 0135 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 583      4320342E 
 583      382E3420 
 583      32303134 
 583      30353236 
 584 0168 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m3 -mthumb -g -O"
 584      20726576 
 584      6973696F 
 584      6E203231 
 584      31333538 
 585 019b 30202D66 		.ascii	"0 -ffunction-sections\000"
 585      66756E63 
 585      74696F6E 
 585      2D736563 
 585      74696F6E 
 586              	.LASF9:
 587 01b1 5F5F696E 		.ascii	"__int32_t\000"
 587      7433325F 
 587      7400
 588              	.LASF13:
 589 01bb 666C6F61 		.ascii	"float\000"
 589      7400
 590              	.LASF2:
 591 01c1 73686F72 		.ascii	"short int\000"
 591      7420696E 
 591      7400
 592              	.LASF12:
 593 01cb 75696E74 		.ascii	"uint16\000"
 593      313600
 594              	.LASF26:
 595 01d2 496E7465 		.ascii	"Interrupt_Handler_UART_Receive\000"
 595      72727570 
 595      745F4861 
 595      6E646C65 
 595      725F5541 
 596              	.LASF22:
 597 01f1 70657269 		.ascii	"period\000"
 597      6F6400
 598              	.LASF18:
 599 01f8 70657269 		.ascii	"period_written\000"
 599      6F645F77 
 599      72697474 
 599      656E00
 600              	.LASF16:
 601 0207 73697A65 		.ascii	"sizetype\000"
 601      74797065 
 601      00
 602              	.LASF24:
ARM GAS  C:\Users\andre\AppData\Local\Temp\ccUVIahi.s 			page 16


 603 0210 2E5C7561 		.ascii	".\\uart_helper_fcns.c\000"
 603      72745F68 
 603      656C7065 
 603      725F6663 
 603      6E732E63 
 604              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
